{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.inspection import DecisionBoundaryDisplay\nfrom Code_repo.eval_metrics_reg_class import clas_metrics\n\ndf = [\n    {\"x1\": 6, \"x2\": 5, \"Label\": \"Blue\"},\n    {\"x1\": 6, \"x2\": 9, \"Label\": \"Blue\"},\n    {\"x1\": 8, \"x2\": 6, \"Label\": \"Red\"},\n    {\"x1\": 8, \"x2\": 8, \"Label\": \"Red\"},\n    {\"x1\": 8, \"x2\": 10, \"Label\": \"Red\"},\n    {\"x1\": 9, \"x2\": 2, \"Label\": \"Blue\"},\n    {\"x1\": 9, \"x2\": 5, \"Label\": \"Red\"},\n    {\"x1\": 10, \"x2\": 10, \"Label\": \"Red\"},\n    {\"x1\": 10, \"x2\": 13, \"Label\": \"Blue\"},\n    {\"x1\": 11, \"x2\": 5, \"Label\": \"Red\"},\n    {\"x1\": 11, \"x2\": 8, \"Label\": \"Red\"},\n    {\"x1\": 12, \"x2\": 6, \"Label\": \"Red\"},\n    {\"x1\": 12, \"x2\": 11, \"Label\": \"Blue\"},\n    {\"x1\": 13, \"x2\": 4, \"Label\": \"Blue\"},\n    {\"x1\": 14, \"x2\": 8, \"Label\": \"Blue\"}\n]\ndf = pd.DataFrame(df)\nX = df[['x1', 'x2']]\ny = LabelEncoder().fit_transform(df['Label'])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\n#gamma - Kernel coefficient for ‘rbf’, ‘poly’ and ‘sigmoid’.\nmodels = {\n    \"Linear\": SVC(kernel=\"linear\", random_state=42),\n    \"RBF\": SVC(kernel=\"rbf\", gamma='scale', random_state=42),\n    \"Polynomial\": SVC(kernel=\"poly\", degree=3, gamma='auto', random_state=42)\n}\n\n# Store results\nresults = {}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    print(f\"\\n--- {name} Kernel ---\")\n    print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n    #print(\"Classification Report:\\n\", clas_metrics.metric_report(y_test, y_pred))\n    results[name] = model\n\n\n#Plotting\ndef plot_decision_boundary(model, title, ax):\n    x_min, x_max = X['x1'].min() - 1, X['x1'].max() + 1\n    y_min, y_max = X['x2'].min() - 1, X['x2'].max() + 1\n    ax.set(xlim=(x_min, x_max), ylim=(y_min, y_max))\n\n    # Plot decision regions\n    DecisionBoundaryDisplay.from_estimator(\n        model,\n        X,\n        response_method=\"predict\",\n        plot_method=\"pcolormesh\",\n        alpha=0.3,\n        ax=ax\n    )\n    DecisionBoundaryDisplay.from_estimator(\n        model,\n        X,\n        response_method=\"decision_function\",\n        plot_method=\"contour\",\n        levels=[-1, 0, 1],\n        colors=[\"k\", \"k\", \"k\"],\n        linestyles=[\"--\", \"-\", \"--\"],\n        ax=ax\n    )\n\n    # Plot support vectors\n    ax.scatter(model.support_vectors_[:, 0],\n               model.support_vectors_[:, 1],\n               s=150,\n               facecolors=\"none\",\n               edgecolors=\"k\")\n\n    # Plot original data\n    scatter = ax.scatter(X['x1'], X['x2'], c=y, cmap='coolwarm', edgecolors='k')\n    ax.set_title(title)\n\n\n#Plot All Kernels Side by Side\nfig, axes = plt.subplots(1, 3, figsize=(18, 5))\n\nfor ax, (name, model) in zip(axes, results.items()):\n    plot_decision_boundary(model, f\"{name} Kernel\", ax)\n\nplt.tight_layout()\nplt.show()\n","metadata":{"_uuid":"83bb2a1b-1ad7-413c-bcac-c6f8fb896990","_cell_guid":"fe999510-2761-4306-bd68-c3ad2f39af41","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-04-16T18:13:46.403170Z","iopub.execute_input":"2025-04-16T18:13:46.403491Z","iopub.status.idle":"2025-04-16T18:13:52.460199Z","shell.execute_reply.started":"2025-04-16T18:13:46.403455Z","shell.execute_reply":"2025-04-16T18:13:52.458551Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/2331431886.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassification_report\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minspection\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDecisionBoundaryDisplay\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mCode_repo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval_metrics_reg_class\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mclas_metrics\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m df = [\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'Code_repo'"],"ename":"ModuleNotFoundError","evalue":"No module named 'Code_repo'","output_type":"error"}],"execution_count":1}]}